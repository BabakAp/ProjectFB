akka {

  actor.provider = "akka.remote.RemoteActorRefProvider"

  remote {
  	enabled-transports = ["akka.remote.netty.tcp"]
  	netty.tcp {
            hostname = 127.0.0.1
            port = 2552
  	}
    }

  log-dead-letters = off
  log-dead-letters-during-shutdown = off
  stdout-loglevel = off
  loglevel = INFO
}

spray.can.server {
  request-timeout = 30s

  pipelining-limit = 8

   # The time period within which a connection handler must have been
   # registered after the bind handler has received a `Connected` event.
   # Set to `infinite` to disable.
   registration-timeout = 10s
}
spray.can {
  client {
    # The max time period that a client connection will be waiting for a response
    # before triggering a request timeout. The timer for this logic is not started
    # until the connection is actually in a state to receive the response, which
    # may be quite some time after the request has been received from the
    # application!
    # There are two main reasons to delay the start of the request timeout timer:
    # 1. On the host-level API with pipelining disabled:
    #    If the request cannot be sent immediately because all connections are
    #    currently busy with earlier requests it has to be queued until a
    #    connection becomes available.
    # 2. With pipelining enabled:
    #    The request timeout timer starts only once the response for the
    #    preceding request on the connection has arrived.
    # Set to `infinite` to completely disable request timeouts.
    request-timeout = 30 s

    # The time period within which the TCP connecting process must be completed.
    # Set to `infinite` to disable.
    connecting-timeout = 10s
  }

  host-connector {
    # The maximum number of parallel connections that an `HttpHostConnector`
    # is allowed to establish to a host. Must be greater than zero.
    max-connections = 10

    # If this setting is enabled, the `HttpHostConnector` pipelines requests
    # across connections, otherwise only one single request can be "open"
    # on a particular HTTP connection.
    pipelining = on

    # The maximum number of times an `HttpHostConnector` attempts to repeat
    # failed requests (if the request can be safely retried) before
    # giving up and returning an error.
    max-retries = 3

  }
}
